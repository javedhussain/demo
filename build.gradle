plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.flywaydb:flyway-core'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Flyway configuration
flyway {
    url = project.hasProperty('dbUrl') ? project.getProperty('dbUrl') : 'jdbc:postgresql://localhost:5432/demo'
    user = project.hasProperty('dbUsername') ? project.getProperty('dbUsername') : 'postgres'
    password = project.hasProperty('dbPassword') ? project.getProperty('dbPassword') : 'postgres'
    locations = ['classpath:db/migration/postgresql']
    baselineOnMigrate = true
    validateOnMigrate = true
    outOfOrder = false
    mixed = false
    cleanDisabled = false  // Enable clean for development
}

// Task to clean and migrate database (only for development)
task cleanAndMigrate {
    doFirst {
        // Check if we're in development mode
        if (project.hasProperty('env') && project.getProperty('env') != 'dev') {
            throw new GradleException('Database clean is only allowed in development environment. Use -Penv=dev to confirm development mode.')
        }
    }
    dependsOn 'flywayClean', 'flywayMigrate'
    tasks.findByName('flywayMigrate').mustRunAfter 'flywayClean'
}
